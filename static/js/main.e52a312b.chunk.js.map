{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","response","ok","Error","status","text","json","TodoList","state","query","sortBy","handleChange","event","target","name","value","setState","this","props","todos","onCheck","onSelect","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","placeholder","map","key","id","ClassNames","checked","readOnly","onClick","userId","React","Component","CurrentUser","user","loadData","prevProps","data","onClear","email","phone","App","selectedUserId","handleCheck","taskId","handleSelect","handleClear","ReactDOM","render","document","getElementById"],"mappings":"uVAEaA,EAAU,SAAAC,GAAG,OAAIC,MAAM,GAAD,OAFlB,mCAEkB,OAAeD,IAC/CE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,MAG5C,OAAOJ,EAASK,W,qCCFPC,G,MAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,OAAQ,OAHZ,EAMEC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAEd,EAAKC,SAAL,eAAiBF,EAAOC,KAT5B,uDAYY,IAAD,EAC8BE,KAAKC,MAAlCC,EADD,EACCA,MAAOC,EADR,EACQA,QAASC,EADjB,EACiBA,SADjB,EAEmBJ,KAAKT,MAAvBC,EAFD,EAECA,MAAOC,EAFR,EAEQA,OAETY,EAAgBH,EACnBI,QAAO,SAACC,GACP,OAAIf,EAEe,OAAfe,EAAKC,OACFD,EAAKC,MAAMC,cAAcC,SAASlB,EAAMiB,eAIxCF,KAERD,QAAO,SAACC,GACP,MAAe,WAAXd,GACMc,EAAKI,UAGA,cAAXlB,EACKc,EAAKI,UAGPJ,KAGX,OACE,yBAAKK,UAAU,YACb,sCAEA,+BACE,2BACEC,KAAK,OACLhB,KAAK,QACLC,MAAON,EACPsB,SAAUd,KAAKN,aACfqB,YAAY,qBAIhB,4BACElB,KAAK,SACLC,MAAOL,EACPqB,SAAUd,KAAKN,cAEf,4BAAQI,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,cAGF,yBAAKc,UAAU,4BACb,wBAAIA,UAAU,kBACXP,EAAcW,KAAI,SAAAT,GAAI,OACrB,wBACEU,IAAKV,EAAKW,GACVN,UAAWO,IAAW,iBACpB,CAAE,0BAA2BZ,EAAKI,WAClC,CAAE,6BAA8BJ,EAAKI,aAEvC,+BACE,2BACEE,KAAK,WACLO,QAASb,EAAKI,UACdG,SAAU,kBAAMX,EAAQI,EAAKW,KAC7BG,UAAQ,IAEV,2BAAId,EAAKC,QAGX,4BACEI,UAAWO,IACT,wBAAyB,SACzB,CAAE,mCAAoCZ,EAAKI,YAE7CE,KAAK,SACLS,QAAS,kBAAMlB,EAASG,EAAKgB,UAN/B,OASG,IACAhB,EAAKgB,mBA5FxB,GAA8BC,IAAMC,Y,wBCAvBC,G,MAAb,4MACEnC,MAAQ,CACNoC,KAAM,MAFV,kEAMI3B,KAAK4B,aANT,yCASqBC,GACbA,EAAUN,SAAWvB,KAAKC,MAAMsB,QAClCvB,KAAK4B,aAXX,iKFMwBL,EEUQvB,KAAKC,MAAMsB,OFVT3C,EAAQ,SAAD,OAAU2C,IENnD,OAgBUI,EAhBV,OAkBI3B,KAAKD,SAAS,CAAE4B,KAAMA,EAAKG,OAlB/B,iCFMwB,IAAAP,IENxB,iGAqBY,IACAI,EAAS3B,KAAKT,MAAdoC,KACAI,EAAY/B,KAAKC,MAAjB8B,QAER,OAAKJ,EAKH,yBAAKf,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEGe,EAAKT,KAIV,wBAAIN,UAAU,qBAAqBe,EAAK9B,MACxC,uBAAGe,UAAU,sBAAsBe,EAAKK,OACxC,uBAAGpB,UAAU,sBAAsBe,EAAKM,OAExC,4BACErB,UAAU,4BACVC,KAAK,SACLS,QAAS,kBAAMS,MAHjB,UAhBK,SA1Bb,GAAiCP,IAAMC,YC+DxBS,E,4MA5Db3C,MAAQ,CACNW,MAAO,GACPiC,eAAgB,G,EAUlBC,YAAc,SAACC,GACb,EAAKtC,UAAS,SAAAR,GAAK,MAAK,CACtBW,MAAOX,EAAMW,MAAMc,KAAI,SAACT,GACtB,OAAIA,EAAKW,KAAOmB,EACP9B,EAGF,2BACFA,GADL,IAEEI,WAAYJ,EAAKI,oB,EAMzB2B,aAAe,SAACf,GACd,EAAKxB,SAAS,CAAEoC,eAAgBZ,K,EAGlCgB,YAAc,WACZ,EAAKxC,SAAS,CAAEoC,eAAgB,K,kEA3Bb,IAAD,OHHQvD,EAAQ,SGK/BG,MAAK,SAACmB,GACL,EAAKH,SAAS,CAAEG,MAAOA,EAAM4B,Y,+BA2BzB,IAAD,EAC2B9B,KAAKT,MAA/BW,EADD,EACCA,MAAOiC,EADR,EACQA,eAEf,OACE,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEV,MAAOA,EACPC,QAASH,KAAKoC,YACdhC,SAAUJ,KAAKsC,gBAInB,yBAAK1B,UAAU,gBACb,yBAAKA,UAAU,0BACZuB,EACC,kBAAC,EAAD,CAAaZ,OAAQY,EAAgBJ,QAAS/B,KAAKuC,cACjD,0B,GArDEf,IAAMC,WCJxBe,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e52a312b.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(response.status, response.text);\n    }\n\n    return response.json();\n  });\n\nexport const getTodos = () => request('todos');\nexport const getUsers = userId => request(`users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    sortBy: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, onCheck, onSelect } = this.props;\n    const { query, sortBy } = this.state;\n\n    const filteredTodos = todos\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title !== null\n            && todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        if (sortBy === 'active') {\n          return !todo.completed;\n        }\n\n        if (sortBy === 'completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          <input\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n            placeholder=\"Search by title\"\n          />\n        </label>\n\n        <select\n          name=\"sortBy\"\n          value={sortBy}\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={ClassNames('TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => onCheck(todo.id)}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={ClassNames(\n                    'TodoList__user-button', 'button',\n                    { 'TodoList__user-button--selected': !todo.completed },\n                  )}\n                  type=\"button\"\n                  onClick={() => onSelect(todo.userId)}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUsers(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onClear } = this.props;\n\n    if (!user) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={() => onClear()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { getTodos } from './api/api';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos: todos.data });\n      });\n  }\n\n  handleCheck = (taskId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== taskId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  handleSelect = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  handleClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onCheck={this.handleCheck}\n            onSelect={this.handleSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClear={this.handleClear} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}